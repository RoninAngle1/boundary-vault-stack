- name: Get a list of Docker containers
  community.docker.docker_container_info:
    name : "{{ item }}"
  loop : 
    - "{{ containers }}"
  register: containers_info

- name: Remove boundary containers if exists.
  community.docker.docker_container: 
    name : "{{  item.container.Id  }}"
    state: absent
    force_kill: yes     
  with_items :
    - "{{ containers_info.results }}"
  when : item.exists 

- name: Remove boundary db volume if not in 'production' env
  become: true
  file:
    path: "{{ vol_path }}"
    state: absent
  when: STACK_ENV != 'production'
  register: vol_absent_result

- name: Deploy boundary using deploy script
  become: true
  shell: VAULT_ADDR={{ vault_addr }} VAULT_TOKEN={{ transit_token }} STACK_DIR={{ stack_dir }} bash {{ deploy_script }} boundary
  ignore_errors: true
  register: boundary_deployment

- name: handle errors if occurred  
  include_tasks: "{{handlers}}/fail_task.yml"
  vars:
    output: "{{ boundary_deployment }}"

- include_tasks: "{{handlers}}/container_healthcheck.yml"
  vars:
    INFO: "{{ containers_info }}"
